id="102"
name="gita"  #declared variables this is a comment

echo "$id"
echo "$name"

#accessed variables using dollar sign

#accesed declared variable name using dollar

echo "employee name is $name using shell"

#declare readonly variable

bloodg="O positive"
readonly bloodg

echo "my blood group is $bloodg  "

#we get error if we try to modify readonly variable
#we can not unset it



#!/bin/bash

#if-fi  loop
name="Priyanka"
if [ "$name" = "Priyanka" ]; then
   echo "Her name is $name"
fi


#if-else-fi loop
age=18
if [ "$age" -ge  18 ]; then
    echo "you can vote"
else
    echo "you can not  vote"
fi


# -ge  represent greater than or equal to    like a>=b
a=10
b=10
if [ "$a" -ge "$b" ]; then
   echo "a  is greater than or equal to b"
else
   echo "b is smaller"
fi


#elif loop

Age=17
if [ "$Age" -ge 18 ];then
    echo "you can vote"
elif [ "$Age" -eq 17 ];then   # -eq =equal
    echo "you have to wait 1 year"
else
    echo "you can not vote"
fi



#nested if else
echo "enter subject"
read subject

if [ $subject == 'Linux' ]
then
echo "enter marks"
read marks
          if [ $marks  -ge 40 ]
          then
          echo "you passed"
          else
          echo "you failed"
          fi
else
echo "wrong subject"
fi


Implementation of `While` Loop in Shell Script.

vim looping.sh
chmod +x looping.sh  (./looping.sh)

====================================
#/bin/bash

a=0

# lt is less than operator

#Iterate the loop until a less than 10

while [ $a -lt 10 ]
do
# Print the values
echo $a
# increment the value
a=`expr $a + 1`
done


=============================

#/bin/bash

a=0

# -gt is greater than operator
#Iterate the loop until a is greater than 10

until [ $a -gt 10 ]
do

# Print the values
echo $a

# increment the value
a=`expr $a + 1`
done

==================
Implementation of `for` Loop with `break` statement in Shell Script.

#/bin/bash

#Start of for loop

for a in 1 2 3 4 5 6 7 8 9 10
do

# if a is equal to 5 break the loop
if [ $a == 5 ]
then
break
fi

# Print the value
echo “Iteration no $a”
done

==================

Implementation of `for` Loop with `continue` statement in Shell Script.

#/bin/bash

for a in 1 2 3 4 5 6 7 8 9 10
do

# if a = 5 then continue the loop and
# don’t move to line 8

if [ $a == 5 ]
then
continue
fi
echo “Iteration no $a”
done


====================
Implementing `until` Loop in Shell Script

#/bin/bash

a=0

# -gt is greater than operator
#Iterate the loop until a is greater than 10

until [ $a -gt 10 ]
do


=======================
Creating an Infinite Loop with “while true” in Shell Script

#/bin/bash

while true
do

# Command to be executed
# sleep 1 indicates it sleeps for 1 sec
echo “Hi, I am infinity loop”
sleep 1

done



Name="Girish"
case "$Name" in
    #case 1
    "Rajib") echo "Profession : Software Engineer" ;;
    
    #case 2
    "Vikas") echo "Profession : Web Developer" ;;
    
    #case 3
    "Girish") echo "Profession : Technical Content Writer" ;;
esac

ls – List directory contents

cd – Change directory

pwd – Print working directory

mkdir – Create directory

rmdir – Remove empty directory

rm – Remove files or directories

cp – Copy files or directories

mv – Move or rename files

touch – Create empty file

cat – Display file content

head / tail – Show beginning/end of file

find – Search files and directories

git config --global user.name "Your Name" – Set your global username

git config --global user.email "you@example.com" – Set your global email

git config --list – View current Git configuration

git init – Initialize a new Git repository

git clone <repo-url> – Clone an existing repository
git status – Show changed files

git add <file> – Stage a file

git add . – Stage all changes

git reset <file> – Unstage a file

git rm <file> – Remove a file from repo
git commit -m "message" – Commit staged changes

git commit -a -m "message" – Commit all tracked changes

git log – View commit history

git show – Show details of a commit

git branch – List branches

git branch <name> – Create new branch

git checkout <name> – Switch to branch

git merge <name> – Merge branch into current

git branch -d <name> – De
git remote -v – Show remote URLs

git remote add origin <url> – Add remote

git push origin <branch> – Push changes

git pull origin <branch> – Pull changes

git fetch – Fetch updates from remote
